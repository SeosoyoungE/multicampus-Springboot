2. AOP용어
 1) 조인포인트
  >> 어드바이스가 적용될 수 있는 위치 - 메소드실행, 생성자호출
  AOP를 적용할 수 잌ㅅ는 모든 지점
  스프링AOP에서는 원타임시점에 프록시방법으로 aOP를 적용하므로 메소드호출만 조인포인트가 된다.
 2) 포인트컷
  >> 핵심로직에 부가기능을 적용하기 위해서 만들어진 필터링로직
  >> 부가기능을 적용할지 말지 판단하기 위해서 만들어 놓은 식
  패키지명, 클래스명, 메소드명, 리턴타입, 매개변수갯수 등으로 필터
 3) 어드바이스
  >> 부가기능 로직을 구현해 놓은 객체(프록시에 의해서 호출될 부가기능)
 4)어드바이저
 5)위빙
  >> 포인트컷으로 필터링되어 결정된 target객체에 어드바이스를 적용하는 것
 6)aspect
 7)target
  >> 어드바이스가 적용될 객체
 3. pointcut문법
  >> executin이라는 포인트컷 지시자와 함께
  @Pointcut("포인트컷지시자(필터링로직)")
  @Pointcut("execution(접근제어자 반환타입 패키지명 클래스명(매개변수))")
  
  접근제어자 리턴타입 패키지명.클래스명.메소드명(매개변수)
   - execution(* *(..))
  		>> 접근제어자생략 리턴타입 패키지와클래스명생략 메소드명(..)
  		(..): 매개변수의 타입과 갯수가 상관없다는 의미
  		
  		* com.multi.aopPro.exam.UserDAO.get*(..)
  		리턴타입 - 아무거나
  		클래스 - com.multi.aopPro.exam.UserDAO
  		메소드 - get으로시작하는 모든것
  		매개변수 - 타입,갯수 상관없이
  		
  		메소드는 *사용가능
  		 * test*(..) >> test로시작하는 모든패키지의 모든클래스의 메소드
  		 * *test*(..) >> test가 들어가는 모든패키지의 모든 클래스의 메소드
  		
  		패키지
  		 . : 현재 위치
  		 .. : 해당 패키지와 그 하위 패키지를 모두 포함
  		 com.multi.aopPro.*.*(..) >> aopPro패키지의 바로 아래 모든 클래스의 모든 메소드
  		 com.multi.aopPro..*.*(..) >> aopPro패키지의 하위 패키지의 모든 클래스들의 모든 메소드
  		 
  		매개변수
  		 (String) >> String타입의 매개변수 1개를 받는 메소드
  		 () >> 매개변수가 없는 메소드
  		 (*) >> 타입은 아무거나 매개변수 갯수는 1개
  		 (*,*,*) >> 세 개의 매개변수 타입은 아무거나
  		 (..) >> 매개변수의 갯수와 상관없이 (있거나 없거나 여러 개 이거나 모두)
  		 		 타입은 아무거나
  		 (int,..) >> 타입은 모든 타입, 매개변수 갯수도 상관없이
  		 			 무조건 첫 번째 매개변수가 int인 메소드
  	
 4. aop적용하는 시점
  @어노테이션("포인트컷정의메소드()")
  
  - 메소드호출전
  - @After