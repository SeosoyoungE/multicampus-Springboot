<?xml version="1.0" encoding="UTF-8"?>
<beans:beans
	xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing 
		infrastructure -->

	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving 
		up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />
	<resources mapping="/images/**" location="/WEB-INF/static/images/" />
	<resources mapping="/css/**" location="/WEB-INF/static/common/css/" />
	<resources mapping="/js/**" location="/WEB-INF/static/common/js/" />
	<resources mapping="/upload/**" location="/WEB-INF/upload/"/>


	<beans:bean id="tilesConfigurer"
		class="org.springframework.web.servlet.view.tiles3.TilesConfigurer">
		<beans:property name="definitions">
			<beans:list>
				<beans:value>/WEB-INF/**/*-tiles.xml</beans:value>
			</beans:list>
		</beans:property>
	</beans:bean>


	<!-- Resolves views selected for rendering by @Controllers to .jsp resources 
		in the /WEB-INF/views directory -->
	<beans:bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
		<beans:property name="order" value="2"></beans:property>
	</beans:bean>

	<beans:bean id="tilesViewResolver"
		class="org.springframework.web.servlet.view.UrlBasedViewResolver">
		<beans:property name="viewClass"
			value="org.springframework.web.servlet.view.tiles3.TilesView" />
		<beans:property name="order" value="1"></beans:property>
	</beans:bean>

	<context:component-scan
		base-package="com , main, kr" />
		
<!-- Spring DB를 위해 필요한 라이브러리들 -->
			<!-- =======spring jdbc - Connection 설정======== -->
			<!--요청이 들어오면 커넥션을 생성해서 넘겨주는 방식  -->
	<!-- <beans:bean id="ds" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<beans:property name="driverClassName" value="com.mysql.cj.jdbc.Driver"/>
		<beans:property name="url" value="jdbc:mysql://localhost:3306/exam?serverTimezone=UTC"/>
		<beans:property name="username" value="exam"></beans:property>
		<beans:property name="password" value="exam"></beans:property>
	</beans:bean> -->
	
			<!-- =======커넥션풀등록======== -->
			 <beans:bean id="hikariConfig" class="com.zaxxer.hikari.HikariConfig">
		<beans:property name="driverClassName" value="com.mysql.cj.jdbc.Driver"/>
		<beans:property name="jdbcUrl" value="jdbc:mysql://localhost:3306/erp?serverTimezone=UTC"/>
		<beans:property name="username" value="erp"></beans:property>
		<beans:property name="password" value="erp"></beans:property>
		<!-- <beans:property name="maximumPoolSize" value="20"></beans:property> -->
	</beans:bean>
	<beans:bean id="ds" class="com.zaxxer.hikari.HikariDataSource" destroy-method="close">
		<beans:constructor-arg ref="hikariConfig"/>
	</beans:bean>
	
	<!-- 스프링에서 db에 연동할 수 있는 메소드를 제공하는 클래스 -->
	<beans:bean id="template" class="org.springframework.jdbc.core.JdbcTemplate">
		<beans:constructor-arg ref="ds"/>
	</beans:bean>
	
	<!-- 			mybatis를 사용하기 위한 설정	 			-->
	<!-- mybatis내부에서 Datasource를 통해 커넥션을 획득해서 관리하는 객체 -->
	<beans:bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<beans:property name="dataSource" ref="ds" />
		<beans:property name="configLocation" value="/WEB-INF/config/mybatis-config.xml"/>
	</beans:bean>
	
	<!-- mybatis의 핵심클래스(sql을 실행하기 위한 기능을 제공 -->
	<beans:bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
		<beans:constructor-arg ref="sqlSessionFactory"/>
	</beans:bean>
		
	<!--					 파일업로드						 -->
	<beans:bean id="multipartResolver" 
            class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <beans:property name="maxUploadSize" value="4000000"/>
    </beans:bean>
	<!--						인터셉터  						-->
	<interceptors>
		<!-- <interceptor> 한개에 인터셉터 한개 등록 -->
		<!-- mapping 엘리먼트에는 어떤 path로 요청하면 인터셉터를 실행할 것인지 등록 -->
		<!-- <mapping path="/**/*"/> 모든 요청이 인터셉터를 거쳐서 실행되도록 설정 -->
		<!-- <interceptor>
			/board로 시작하는 모든 요청에 대해 인터셉터를 거쳐 실행되도록 설정
			<mapping path="/board/**"/>
			<mapping path="/emp/mypage"/>
			위에서 설정한 path에 해당되더라도 인터셉터를 거치지 않고 예외시킬 path를 등록
			<exclude-mapping path="/board/download/**"/>
			<beans:bean class="com.multi.erp.etc.TimeCheckInterceptor"></beans:bean>
		</interceptor> -->
		<interceptor>
			<mapping path="/**"/>
			<exclude-mapping path="/index.do"/>
			<exclude-mapping path="/board/ajax/list.do"/>
			<exclude-mapping path="/emp/login.do"/>
			<exclude-mapping path="/board/list.do"/>
			<exclude-mapping path="/emp/spring/login"/>
			<exclude-mapping path="/emp/spring/logout"/>
			<exclude-mapping path="/images/**"/>
			<exclude-mapping path="/css/**"/>
			<exclude-mapping path="/js/**"/>
			<beans:bean class="com.multi.erp.common.LoginCheckInterceptor"></beans:bean>
		</interceptor>
	</interceptors>







	
</beans:beans>
